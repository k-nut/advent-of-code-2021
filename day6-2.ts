const part2 = async (fishState: string, iterations: number) => {
  let timers = fishState.split(",").map((s) => parseInt(s, 10));
  let counter = timers.reduce((counters, timer) => {
    return {
      ...counters,
      [timer]: (counters[timer] || 0) + 1,
    };
  }, {} as Record<string, number>);
  console.log(counter);

  for (let i = 0; i < iterations; i++) {
    counter = {
      "8": counter["0"],
      "7": counter["8"],
      "6": (counter["7"] || 0) + (counter["0"] || 0),
      "5": counter["6"],
      "4": counter["5"],
      "3": counter["4"],
      "2": counter["3"],
      "1": counter["2"],
      "0": counter["1"],
    };
  }

  console.log(Object.values(counter).reduce((agg, count) => agg + count));
};

await part2("3,4,3,1,2", 256);
await part2(
  "1,3,4,1,1,1,1,1,1,1,1,2,2,1,4,2,4,1,1,1,1,1,5,4,1,1,2,1,1,1,1,4,1,1,1,4,4,1,1,1,1,1,1,1,2,4,1,3,1,1,2,1,2,1,1,4,1,1,1,4,3,1,3,1,5,1,1,3,4,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,5,2,5,5,3,2,1,5,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,5,1,1,1,1,5,1,1,1,1,1,4,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,3,1,2,4,1,5,5,1,1,5,3,4,4,4,1,1,1,2,1,1,1,1,1,1,2,1,1,1,1,1,1,5,3,1,4,1,1,2,2,1,2,2,5,1,1,1,2,1,1,1,1,3,4,5,1,2,1,1,1,1,1,5,2,1,1,1,1,1,1,5,1,1,1,1,1,1,1,5,1,4,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,5,4,5,1,1,1,1,1,1,1,5,1,1,3,1,1,1,3,1,4,2,1,5,1,3,5,5,2,1,3,1,1,1,1,1,3,1,3,1,1,2,4,3,1,4,2,2,1,1,1,1,1,1,1,5,2,1,1,1,2",
  256
);
